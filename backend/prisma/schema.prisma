generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ACTIVIST
  CITY_ORGANISER
  REGIONAL_ORGANISER
  COFOUNDER
}

enum ContentScope {
  CITY
  REGIONAL
  GLOBAL
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  DENIED
}

model User {
  id              String  @id @default(cuid())
  email           String  @unique
  password        String
  name            String
  role            Role    @default(ACTIVIST)
  createdAt       DateTime @default(now())

  // FIX: Restored the @unique attribute to correctly define the one-to-one relation.
  managedRegionId String?  @unique

  // RELATIONS
  memberships           ChapterMembership[]
  managedRegion         Region?                @relation("RegionalOrganiserOf", fields: [managedRegionId], references: [id])
  registrations         EventRegistration[]
  trainingRegistrations TrainingRegistration[]
  joinRequests          JoinRequest[]
  createdAnnouncements  Announcement[]         @relation("AuthorOfAnnouncement")
  createdEvents         Event[]                @relation("AuthorOfEvent")
  createdTrainings      Training[]             @relation("AuthorOfTraining")
  comments              Comment[]              @relation("AuthorOfComment")
}

model Region {
  id                String       @id @default(cuid())
  name              String       @unique

  // RELATIONS
  chapters          Chapter[]
  regionalOrganiser User?        @relation("RegionalOrganiserOf")
  events            Event[]      @relation("RegionEvents")
  trainings         Training[]   @relation("RegionTrainings")
  announcements     Announcement[] @relation("RegionAnnouncements")
}

model Chapter {
  id            String            @id @default(cuid())
  name          String
  description   String?

  regionId      String
  region        Region            @relation(fields: [regionId], references: [id], onDelete: Cascade)

  // RELATIONS
  memberships   ChapterMembership[]
  events        Event[]           @relation("ChapterEvents")
  trainings     Training[]        @relation("ChapterTrainings")
  joinRequests  JoinRequest[]
  announcements Announcement[]    @relation("ChapterAnnouncements")
}

model ChapterMembership {
  userId    String
  chapterId String
  joinedAt  DateTime @default(now())
  role      Role     @default(ACTIVIST)

  // RELATIONS
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@id([userId, chapterId])
}

model Event {
  id          String       @id @default(cuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  location    String
  scope       ContentScope @default(CITY)

  authorId    String
  authorRole  Role
  author      User         @relation("AuthorOfEvent", fields: [authorId], references: [id], onDelete: Cascade)

  // RELATIONS
  chapterId     String?
  chapter       Chapter?     @relation("ChapterEvents", fields: [chapterId], references: [id], onDelete: Cascade)
  regionId      String?
  region        Region?      @relation("RegionEvents", fields: [regionId], references: [id], onDelete: SetNull)
  registrations EventRegistration[]
  comments      Comment[]    @relation("EventComments")
}

model EventRegistration {
  userId  String
  eventId String
  attended Boolean @default(false)

  // RELATIONS
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
}

model Training {
  id          String       @id @default(cuid())
  title       String
  description String
  startTime   DateTime
  duration    Float
  scope       ContentScope

  authorId    String
  authorRole  Role
  author      User         @relation("AuthorOfTraining", fields: [authorId], references: [id], onDelete: Cascade)

  // RELATIONS
  chapterId     String?
  chapter       Chapter?     @relation("ChapterTrainings", fields: [chapterId], references: [id], onDelete: Cascade)
  regionId      String?
  region        Region?      @relation("RegionTrainings", fields: [regionId], references: [id], onDelete: SetNull)
  registrations TrainingRegistration[]
  comments      Comment[]    @relation("TrainingComments")
}

model TrainingRegistration {
  userId     String
  trainingId String
  createdAt  DateTime @default(now())
  attended   Boolean  @default(false)

  // RELATIONS
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)

  @@id([userId, trainingId])
}

model Announcement {
  id        String       @id @default(cuid())
  title     String
  content   String       @db.Text
  createdAt DateTime     @default(now())
  scope     ContentScope

  authorId    String
  authorRole  Role
  author      User         @relation("AuthorOfAnnouncement", fields: [authorId], references: [id], onDelete: Cascade)
  
  // RELATIONS
  chapterId   String?
  chapter     Chapter?     @relation("ChapterAnnouncements", fields: [chapterId], references: [id], onDelete: Cascade)
  regionId    String?
  region      Region?      @relation("RegionAnnouncements", fields: [regionId], references: [id], onDelete: SetNull)
  comments    Comment[]    @relation("AnnouncementComments")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())

  authorId  String
  author    User     @relation("AuthorOfComment", fields: [authorId], references: [id], onDelete: Cascade)

  // RELATIONS (Comment can belong to one of these)
  eventId         String?
  event           Event?  @relation("EventComments", fields: [eventId], references: [id], onDelete: Cascade)
  announcementId  String?
  announcement    Announcement? @relation("AnnouncementComments", fields: [announcementId], references: [id], onDelete: Cascade)
  trainingId      String?
  training        Training? @relation("TrainingComments", fields: [trainingId], references: [id], onDelete: Cascade)
}

model JoinRequest {
  id        String            @id @default(cuid())
  userId    String
  chapterId String
  status    JoinRequestStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // RELATIONS
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter   Chapter           @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
}

model ResourceCategory {
  id        String     @id @default(cuid())
  name      String     @unique
  // RELATIONS
  resources Resource[]
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  createdAt   DateTime @default(now())

  categoryId  String
  category    ResourceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}