generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ACTIVIST
  CITY_ORGANISER
  REGIONAL_ORGANISER
  COFOUNDER
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  password              String
  name                  String
  role                  Role                   @default(ACTIVIST)
  createdAt             DateTime               @default(now())
  memberships           TeamMembership[]
  managedRegion         Region?                @relation("RegionalOrganiserOf", fields: [managedRegionId], references: [id])
  managedRegionId       String?                @unique
  registrations         EventRegistration[]
  trainingRegistrations TrainingRegistration[]
  joinRequests          JoinRequest[] 
  announcements Announcement[] 
  comments              Comment[]        

}

model Region {
  id                String     @id @default(cuid())
  name              String     @unique
  teams             Team[]
  regionalOrganiser User?      @relation("RegionalOrganiserOf")
  trainings         Training[]
  events            Event[] 
  announcements Announcement[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())

  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  eventId         String?
  event           Event?  @relation(fields: [eventId], references: [id])
  announcementId  String?
  announcement    Announcement? @relation(fields: [announcementId], references: [id])
}

model Team {
  id          String           @id @default(cuid())
  name        String
  description String?
  regionId    String
  region      Region           @relation(fields: [regionId], references: [id])
  memberships TeamMembership[]
  events      Event[]
  trainings   Training[]
  joinRequests JoinRequest[]
  announcements Announcement[]
}

model TeamMembership {
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   String
  joinedAt DateTime @default(now())

  @@id([userId, teamId])
}

model Event {
  id            String   @id @default(cuid())
  title         String
  description   String
  startTime     DateTime
  endTime       DateTime
  location      String
    scope         TrainingScope @default(CITY) 

  teamId        String?
  team          Team?    @relation(fields: [teamId], references: [id])
  
  regionId      String? 
  region        Region?  @relation(fields: [regionId], references: [id])

  comments Comment[]
  
  registrations EventRegistration[]
}


model EventRegistration {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  attended  Boolean  @default(false)

  @@unique([userId, eventId])
}


model ResourceCategory {
  id        String      @id @default(cuid())
  name      String      @unique
  resources Resource[]
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String   // This will be a URL pointing to the file
  createdAt   DateTime @default(now())

  category   ResourceCategory @relation(fields: [categoryId], references: [id])
  categoryId String
}

enum TrainingScope {
  CITY
  REGIONAL
  GLOBAL
}


model Training {
  id            String   @id @default(cuid())
  title         String
  description   String
  startTime     DateTime
  duration      Float // Duration in hours
  
  scope         TrainingScope // e.g., CITY, REGIONAL
  
  // Optional links depending on the scope
  teamId        String?  // For CITY scope
  team          Team?    @relation(fields: [teamId], references: [id])
  
  regionId      String?  // For REGIONAL scope
  region        Region?  @relation(fields: [regionId], references: [id])
  
  registrations TrainingRegistration[]
}

model TrainingRegistration {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  training   Training @relation(fields: [trainingId], references: [id])
  trainingId String
  createdAt  DateTime @default(now())

  @@unique([userId, trainingId])
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  DENIED
}

model JoinRequest {
  id        String            @id @default(cuid())
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  team      Team              @relation(fields: [teamId], references: [id])
  teamId    String
  status    JoinRequestStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([userId, teamId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text // Use Text type for longer content
  createdAt DateTime @default(now())

  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  scope     TrainingScope // Reuse enum: CITY, REGIONAL, GLOBAL

  // Optional links depending on scope
  teamId    String?
  team      Team?    @relation(fields: [teamId], references: [id])
  
  regionId  String?
  region    Region?  @relation(fields: [regionId], references: [id])

  comments Comment[]
}